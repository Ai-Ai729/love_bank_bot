# love_bank.py
# –ú–∏–Ω–∏-–±–æ—Ç Love Bank:
# - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ, –±–∞–ª–∞–Ω—Å, –º–µ–Ω—é –ø—Ä–∏–∑–æ–≤
# - –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Ñ–æ—Ç–æ –∏–≥—Ä—É—à–µ—á–Ω—ã—Ö 100‚Ç¨ –∏ —Å—á–∏—Ç–∞–µ—Ç –ö–û–õ–ò–ß–ï–°–¢–í–û –∫—É–ø—é—Ä —á–µ—Ä–µ–∑ OpenAI Vision
# - 1 –∫—É–ø—é—Ä–∞ = 100‚Ç¨, –∑–∞—á–∏—Å–ª—è–µ—Ç –±–∞–ª–∞–Ω—Å –∏ –¥–∞—ë—Ç –æ–±–º–µ–Ω—è—Ç—å –Ω–∞ –ø—Ä–∏–∑—ã
# - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü—É –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏/–ø–æ–∫—É–ø–∫–µ (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω OWNER_CHAT_ID)
# - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∞–ª—å–±–æ–º–æ–≤ (media_group_id)
# - NEW: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞ –ø—Ä–∏–∑–∞
# - NEW: –∑–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∏–¥–µ–Ω—Ç–∏—á–Ω–æ–≥–æ —Ñ–æ—Ç–æ (–∞–Ω—Ç–∏-–¥—É–±–ª–∏)

import os, re, sqlite3, base64, asyncio, hashlib, time, secrets
from collections import defaultdict

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler,
    CallbackQueryHandler, ContextTypes, filters
)

# -------- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è --------
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
OWNER_CHAT_ID  = os.getenv("OWNER_CHAT_ID")   # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —Ç–≤–æ–π chat id –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
DENOM_VALUE    = 100     # –Ω–æ–º–∏–Ω–∞–ª –æ–¥–Ω–æ–π –∏–≥—Ä—É—à–µ—á–Ω–æ–π –∫—É–ø—é—Ä—ã
JACKPOT        = 5000    # –ø–æ—Ä–æ–≥ —Å—É–ø–µ—Ä–ø—Ä–∏–∑–∞
DB_PATH        = "love_bank.db"

if not TELEGRAM_TOKEN:
    raise SystemExit("–ù—É–∂–Ω–æ –≤—ã—Å—Ç–∞–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é TELEGRAM_TOKEN")
if not OPENAI_API_KEY:
    raise SystemExit("–ù—É–∂–Ω–æ –≤—ã—Å—Ç–∞–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é OPENAI_API_KEY")

# -------- OpenAI (Responses API) --------
from openai import OpenAI
client = OpenAI(api_key=OPENAI_API_KEY)

async def owner_notify(context: ContextTypes.DEFAULT_TYPE, text: str):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —à–ª—ë–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω OWNER_CHAT_ID."""
    if not OWNER_CHAT_ID:
        return
    try:
        await context.bot.send_message(chat_id=int(OWNER_CHAT_ID), text=text)
    except Exception:
        pass

def count_banknotes_with_openai(image_bytes: bytes) -> int:
    """–ü—Ä–æ—Å–∏–º –º–æ–¥–µ–ª—å –ø–æ—Å—á–∏—Ç–∞—Ç—å –°–ö–û–õ–¨–ö–û –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∏–≥—Ä—É—à–µ—á–Ω—ã—Ö –∫—É–ø—é—Ä 100‚Ç¨ –Ω–∞ —Ñ–æ—Ç–æ."""
    b64 = base64.b64encode(image_bytes).decode("utf-8")
    prompt = (
        "You are counting TOY euro banknotes. "
        "These are fake 100 EURO notes. "
        "Count HOW MANY SEPARATE banknotes are visible on the photo. "
        "Important: multiple '100' texts on the SAME note still count as ONE. "
        "Answer ONLY with an integer number, nothing else."
    )
    resp = client.responses.create(
        model="gpt-4o-mini",
        input=[{
            "role": "user",
            "content": [
                {"type": "input_text", "text": prompt},
                {"type": "input_image", "image_url": f"data:image/jpeg;base64,{b64}"}
            ],
        }],
    )
    text = resp.output_text.strip()
    m = re.search(r"\d+", text)
    if m:
        return int(m.group())
    return 0

# -------- –ú–µ–Ω—é –ø—Ä–∏–∑–æ–≤ --------
MENU = [
    ("–ü–æ—Ü–µ–ª—É–π üíã ",          100,   "kiss"),
    ("–û–±–Ω–∏–º–∞—à–∫–∏ ü§ó (—Å –±–æ–Ω—É—Å–æ–º)", 200, "hug"),
    ("–ú–∞—Å—Å–∞–∂ —Å–ø–∏–Ω—ã üíÜ",    300,   "massage"),
    ("–î–æ–º–∞—à–Ω—è—è –≤—ã–ø–µ—á–∫–∞ üç∞", 400,  "coffee"),
    ("–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ (—Ç—ã —Å–ø–∏—à—å, –ù–∏–∫—É –æ—Ç–≤–æ–∂—É –≤ —Å–∞–¥ —è)",  500, "breakfast"),
    ("–ü–µ—Ä–µ–≤–æ–¥ 100‚Ç¨ –Ω–∞ —Å—á—ë—Ç üí∞ (—Å –∫–≤–∏—Ç–∞–Ω—Ü–∏–µ–π)", 1000, "cashout100"),
    ("–°–ï–ö–†–ï–¢–ù–´–ô –°–£–ü–ï–†–ü–†–ò–ó üíÉ (–≥–æ—Ç–æ–≤—å—Å—è‚Ä¶)",     5000,  "jackpot"),
]

def menu_keyboard(balance: int) -> InlineKeyboardMarkup:
    rows = []
    for title, cost, code in MENU:
        label = f"{title} ‚Äî {cost}‚Ç¨"
        if balance >= cost:
            cb = f"redeem|{code}|{cost}"
        else:
            label = "üîí " + label
            cb = f"lock|{code}|{cost}"
        rows.append([InlineKeyboardButton(label, callback_data=cb)])
    return InlineKeyboardMarkup(rows)

# -------- –ë–∞–∑–∞ (SQLite) --------
def init_db():
    con = sqlite3.connect(DB_PATH)
    cur = con.cursor()
    cur.execute("""CREATE TABLE IF NOT EXISTS users(
        user_id INTEGER PRIMARY KEY,
        first_name TEXT,
        username TEXT,
        balance INTEGER DEFAULT 0
    )""")
    # NEW: —Ç–∞–±–ª–∏—Ü–∞ —É—á—Ç—ë–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–∞–Ω—Ç–∏-–¥—É–±–ª–∏–∫–∞—Ç—ã)
    cur.execute("""CREATE TABLE IF NOT EXISTS images(
        user_id INTEGER,
        hash TEXT,
        created_at INTEGER,
        PRIMARY KEY(user_id, hash)
    )""")
    # NEW: –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –æ–±–º–µ–Ω—ã (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ)
    cur.execute("""CREATE TABLE IF NOT EXISTS pending(
        token TEXT PRIMARY KEY,
        user_id INTEGER,
        code TEXT,
        cost INTEGER,
        created_at INTEGER
    )""")
    con.commit(); con.close()

def with_db(fn):
    def wrapper(*args, **kwargs):
        con = sqlite3.connect(DB_PATH)
        try:
            res = fn(con, *args, **kwargs)
            con.commit()
            return res
        finally:
            con.close()
    return wrapper

@with_db
def ensure_user(con, u):
    cur = con.cursor()
    cur.execute("SELECT 1 FROM users WHERE user_id=?", (u.id,))
    if not cur.fetchone():
        cur.execute("INSERT INTO users(user_id, first_name, username, balance) VALUES (?,?,?,0)",
                    (u.id, u.first_name or "", u.username or ""))

@with_db
def get_balance(con, user_id: int) -> int:
    cur = con.cursor()
    cur.execute("SELECT balance FROM users WHERE user_id=?", (user_id,))
    row = cur.fetchone()
    return row[0] if row else 0

@with_db
def add_balance(con, user_id: int, delta: int) -> int:
    cur = con.cursor()
    cur.execute("SELECT balance FROM users WHERE user_id=?", (user_id,))
    row = cur.fetchone()
    if not row:
        raise RuntimeError("user not found")
    new_bal = row[0] + delta
    if new_bal < 0:
        raise ValueError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")
    cur.execute("UPDATE users SET balance=? WHERE user_id=?", (new_bal, user_id))
    return new_bal

# --- –ê–Ω—Ç–∏-–¥—É–±–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ---
def sha256_hex(b: bytes) -> str:
    return hashlib.sha256(b).hexdigest()

@with_db
def try_add_image_hash(con, user_id: int, h: str) -> bool:
    """True, –µ—Å–ª–∏ —Ö—ç—à –∑–∞–ø–∏—Å–∞–Ω (–Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ). False, –µ—Å–ª–∏ —É–∂–µ –±—ã–ª–æ."""
    cur = con.cursor()
    try:
        cur.execute("INSERT INTO images(user_id, hash, created_at) VALUES (?,?,?)",
                    (user_id, h, int(time.time())))
        return True
    except sqlite3.IntegrityError:
        return False

# --- Pending –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–±–º–µ–Ω–∞ ---
@with_db
def pending_put(con, token: str, user_id: int, code: str, cost: int):
    cur = con.cursor()
    cur.execute(
        "INSERT OR REPLACE INTO pending(token, user_id, code, cost, created_at) VALUES (?,?,?,?,?)",
        (token, user_id, code, cost, int(time.time()))
    )

@with_db
def pending_get(con, token: str):
    cur = con.cursor()
    cur.execute("SELECT user_id, code, cost FROM pending WHERE token=?", (token,))
    return cur.fetchone()  # (user_id, code, cost) | None

@with_db
def pending_del(con, token: str):
    cur = con.cursor()
    cur.execute("DELETE FROM pending WHERE token=?", (token,))

# -------- –ö–æ–º–∞–Ω–¥—ã --------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    ensure_user(user)
    name = user.first_name or "–º–æ–π –∫–ª–∏–µ–Ω—Ç"
    text = (
        f"–ü—Ä–∏–≤–µ—Ç, {name}! –Ø —Ç–≤–æ–π <b>Love Bank</b> üíò\n\n"
        "–ü—Ä–∞–≤–∏–ª–∞ –ø—Ä–æ—Å—Ç—ã–µ:\n"
        "‚Ä¢ –ü—Ä–∏—Å—ã–ª–∞–π —Ñ–æ—Ç–æ —Å –∫—É–ø—é—Ä–∞–º–∏ 100‚Ç¨. –Ø –ø–æ—Å—á–∏—Ç–∞—é –∏ –ø–æ–ø–æ–ª–Ω—é —Ç–≤–æ–π –±–∞–ª–∞–Ω—Å.\n"
        "‚Ä¢ –û—Ç–∫—Ä–æ–π /love_menu –∏ –º–µ–Ω—è–π –∏—Ö –Ω–∞ —Ä–∞–¥–æ—Å—Ç–∏.\n\n"
        "<i>P.S. –î–∞–∂–µ –µ—Å–ª–∏ –¥–µ–Ω—å–≥–∏ —Ñ–∞–ª—å—à–∏–≤—ã–µ, –Ω–∞—à–∞ –ª—é–±–æ–≤—å –Ω–∞—Å—Ç–æ—è—â–∞—è üß°.</i>"
    )
    await update.message.reply_text(text, parse_mode="HTML")

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∞–≤–∏–ª–∞ –ø—Ä–æ—Å—Ç—ã–µ:\n"
        "‚Ä¢ –ü—Ä–∏—Å—ã–ª–∞–π —Ñ–æ—Ç–æ —Å –∫—É–ø—é—Ä–∞–º–∏ 100‚Ç¨. –Ø –ø–æ—Å—á–∏—Ç–∞—é –∏ –ø–æ–ø–æ–ª–Ω—é —Ç–≤–æ–π –±–∞–ª–∞–Ω—Å.\n"
        "‚Ä¢ –û—Ç–∫—Ä–æ–π /love_menu –∏ –º–µ–Ω—è–π –∏—Ö –Ω–∞ —Ä–∞–¥–æ—Å—Ç–∏.\n\n"
        "–°–æ–≤–µ—Ç—ã:\n"
        "‚Ä¢ –ö–ª–∞–¥–∏ –∫—É–ø—é—Ä—ã –Ω–∞ —Å–≤–µ—Ç–ª—ã–π —Ñ–æ–Ω, –Ω–µ –ø–µ—Ä–µ–∫—Ä—ã–≤–∞–π.\n"
        "‚Ä¢ –õ—É—á—à–µ –æ–¥–Ω–∏–º —Å–ª–æ–µ–º.\n"
        "‚Ä¢ –ú–æ–∂–Ω–æ —Å–Ω–∏–º–∞—Ç—å —Å—Ä–∞–∑—É –ø–∞—á–∫—É.\n\n"
    )

async def balance_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    bal = get_balance(update.effective_user.id)
    await update.message.reply_text(f"–¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {bal}‚Ç¨\n–ò –ø–æ–º–Ω–∏, —Ç—ã –≤—Å–µ–≥–¥–∞ –ø—Ä–∞–≤, –ø–æ—Ç–æ–º—É —á—Ç–æ —Ç—ã –ª–µ–≤ :)")

async def menu_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    bal = get_balance(update.effective_user.id)
    await update.message.reply_text(
        f"–û–±–º–µ–Ω–Ω—ã–π –∫—É—Ä—Å. –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {bal}‚Ç¨\n–í—ã–±–∏—Ä–∞–π –ø—Ä–∏–∑, –∫—Ä–∞—Å–∞–≤—á–∏–∫:",
        reply_markup=menu_keyboard(bal)
    )

# -------- –§–æ—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∫–∞ --------
album_buffers = defaultdict(list)  # gid -> [bytes]
album_tasks: dict[str, asyncio.Task] = {}  # gid -> asyncio.Task

async def photo_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    ensure_user(user)

    photo = update.message.photo[-1]
    file = await photo.get_file()
    b = await file.download_as_bytearray()

    # 1) —Å—á–∏—Ç–∞–µ–º –∫—É–ø—é—Ä—ã
    try:
        count = count_banknotes_with_openai(b)
    except Exception:
        await update.message.reply_text("–£–ø—Å, –Ω–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ñ–æ—Ç–æ üôà")
        return

    if count <= 0:
        await update.message.reply_text("–Ø –Ω–µ –≤–∏–∂—É –∫—É–ø—é—Ä—ã üòî")
        return

    # 2) —Ñ–∏–∫—Å–∏—Ä—É–µ–º —Ö—ç—à –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π (–ø–æ—Å–ª–µ —É–¥–∞—á–Ω–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è)
    h = sha256_hex(b)
    if not try_add_image_hash(user.id, h):
        await update.message.reply_text("–ê–≥–∞! –ü–æ–ø–∞–ª—Å—è! –≠—Ç–æ —Ñ–æ—Ç–æ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–æ—Å—å –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è ü§ö\n–ü—Ä–∏—à–ª–∏ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ.")
        return

    # 3) –Ω–∞—á–∏—Å–ª—è–µ–º
    amount = count * DENOM_VALUE
    new_bal = add_balance(user.id, amount)

    await owner_notify(
        context,
        f"üí∂ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: {user.first_name or user.username or user.id} "
        f"+{amount}‚Ç¨ (–∫—É–ø—é—Ä: {count}). –ë–∞–ª–∞–Ω—Å: {new_bal}‚Ç¨."
    )

    msg = (
        f"‚úÖ –ö—É–ø—é—Ä –Ω–∞–π–¥–µ–Ω–æ: {count} √ó {DENOM_VALUE}‚Ç¨ = +{amount}‚Ç¨\n"
        f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {new_bal}‚Ç¨"
    )
    if new_bal >= JACKPOT and (new_bal - amount) < JACKPOT:
        msg += "\n\nüéâ –¢—ã —Å–æ–±—Ä–∞–ª —Å—É–ø–µ—Ä–ø—Ä–∏–∑! –û—Ç–∫—Ä–æ–π /love_menu."
    await update.message.reply_text(msg)
    await update.message.reply_text("–•–æ—á–µ—à—å –æ–±–º–µ–Ω—è—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å?", reply_markup=menu_keyboard(new_bal))

# -------- Album handler: –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –≤–µ—Å—å –∞–ª—å–±–æ–º --------
async def album_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ–±–∏—Ä–∞–µ–º —Ñ–æ—Ç–æ –∞–ª—å–±–æ–º–∞ –∏ –ø–ª–∞–Ω–∏—Ä—É–µ–º –µ–¥–∏–Ω–∏—á–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —á–µ—Ä–µ–∑ asyncio."""
    user = update.effective_user
    ensure_user(user)

    gid = update.message.media_group_id
    photo = update.message.photo[-1]
    file = await photo.get_file()
    b = await file.download_as_bytearray()
    # –ö–ª–∞–¥—ë–º –≤—Å–µ —Ñ–æ—Ç–æ; —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –±—É–¥–µ–º –ø–æ—Å–ª–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
    album_buffers[gid].append(b)

    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –û–î–ò–ù —Ä–∞–∑ –Ω–∞ –≤–µ—Å—å –∞–ª—å–±–æ–º (–µ—Å–ª–∏ –µ—â—ë –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞)
    if gid not in album_tasks:
        chat_id = update.effective_chat.id
        first_name = user.first_name or user.username or str(user.id)

        async def finalize_after_delay():
            # –∂–¥—ë–º, –ø–æ–∫–∞ Telegram –¥–æ–≥—Ä—É–∑–∏—Ç –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ –∞–ª—å–±–æ–º–∞
            await asyncio.sleep(1.2)
            images = album_buffers.pop(gid, [])
            album_tasks.pop(gid, None)  # —Å–Ω—è—Ç—å ¬´–∑–∞–º–æ–∫¬ª –∑–∞–¥–∞—á–∏

            if not images:
                return

            total_count = 0
            accepted_photos = 0

            # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: —Å—á–∏—Ç–∞–µ–º, –∑–∞—Ç–µ–º –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–º–µ—Ç–∏—Ç—å —Ö—ç—à (–∞–Ω—Ç–∏-–¥—É–±–ª—å).
            for img in images:
                try:
                    c = count_banknotes_with_openai(img)
                except Exception:
                    continue
                if c <= 0:
                    continue
                h = sha256_hex(img)
                if not try_add_image_hash(user.id, h):
                    # –¥—É–±–ª—å ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                    continue
                total_count += c
                accepted_photos += 1

            if total_count <= 0:
                await context.bot.send_message(
                    chat_id,
                    "–ê–≥–∞! –ü–æ–ø–∞–ª—Å—è! –í –∞–ª—å–±–æ–º–µ –Ω–µ—Ç –Ω–æ–≤—ã—Ö —Ñ–æ—Ç–æ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è ü§∑‚Äç‚ôÄÔ∏è"
                )
                return

            amount = total_count * DENOM_VALUE
            new_bal = add_balance(user.id, amount)

            # –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É (–≤ –õ–°)
            await owner_notify(
                context,
                f"üí∂ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ (–∞–ª—å–±–æ–º): {first_name} +{amount}‚Ç¨ "
                f"(–∫—É–ø—é—Ä: {total_count}, —É—á—Ç—ë–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ: {accepted_photos}/{len(images)}). –ë–∞–ª–∞–Ω—Å: {new_bal}‚Ç¨."
            )

            # –û–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –≤–µ—Å—å –∞–ª—å–±–æ–º: —Å–≤–æ–¥–∫–∞ + –º–µ–Ω—é
            text = (
                "üì∏ –§–æ—Ç–æ—Å–µ—Å—Å–∏—è –¥–ª—è –¥–µ–Ω–µ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
                f"‚úÖ –í –∞–ª—å–±–æ–º–µ –∑–∞—á—Ç–µ–Ω–æ {accepted_photos} —Ñ–æ—Ç–æ. "
                f"–ù–∞–π–¥–µ–Ω–æ {total_count} –∫—É–ø—é—Ä √ó {DENOM_VALUE}‚Ç¨ = +{amount}‚Ç¨\n"
                f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {new_bal}‚Ç¨\n\n"
                "–•–æ—á–µ—à—å –æ–±–º–µ–Ω—è—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å?"
            )
            await context.bot.send_message(chat_id, text, reply_markup=menu_keyboard(new_bal))

        album_tasks[gid] = asyncio.create_task(finalize_after_delay())

# -------- Router --------
async def photo_router(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.media_group_id:
        await album_handler(update, context)
    else:
        await photo_handler(update, context)

# -------- Callback –∫–Ω–æ–ø–æ–∫ (–≤–∫–ª—é—á–∞—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ) --------
async def callbacks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    user = update.effective_user
    ensure_user(user)

    data = (q.data or "").split("|")
    # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∫–∞–∫ —Ñ–æ—Ä–º–∞—Ç—ã –∏–∑ –º–µ–Ω—é (len==3), —Ç–∞–∫ –∏ confirm/cancel (len==2)
    action = data[0]
    if action == "lock":
        await q.edit_message_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ü—Ä–∏—à–ª–∏ –µ—â—ë —Ñ–æ—Ç–æ üòâ")
        return

    if action == "redeem":
        if len(data) != 3:
            return
        _, code, cost_s = data
        cost = int(cost_s)

        bal = get_balance(user.id)
        item = next((t for (t, c, k) in MENU if k == code and c == cost), None)
        if not item:
            await q.edit_message_text("–ü–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        if bal < cost:
            await q.edit_message_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ö–æ–ø–∏ –µ—â–µ üòâ")
            return

        # NEW: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞
        token = secrets.token_hex(8)
        pending_put(token, user.id, code, cost)

        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–±–º–µ–Ω", callback_data=f"confirm|{token}")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"cancel|{token}")]
        ])
        await q.edit_message_text(
            f"–¢—ã –≤—ã–±–∏—Ä–∞–µ—à—å: {item} –∑–∞ {cost}‚Ç¨.\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏ –æ–±–º–µ–Ω?",
            reply_markup=kb
        )
        return

    if action == "confirm":
        if len(data) != 2:
            return
        token = data[1]
        row = pending_get(token)
        if not row:
            await q.edit_message_text("–ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.")
            return
        p_user_id, p_code, p_cost = row
        if p_user_id != user.id:
            await q.edit_message_text("–≠—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–±–µ.")
            return

        bal = get_balance(user.id)
        item = next((t for (t, c, k) in MENU if k == p_code and c == p_cost), None)
        if not item:
            pending_del(token)
            await q.edit_message_text("–ü–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        if bal < p_cost:
            pending_del(token)
            await q.edit_message_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ö–æ–ø–∏ –µ—â–µ üòâ")
            return

        new_bal = add_balance(user.id, -p_cost)
        pending_del(token)

        extra = ""
        if p_code == "cashout100":
            extra = "\nüßæ –ñ–¥–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
        if p_code == "jackpot":
            extra = "\nüíÉ –°—É–ø–µ—Ä–ø—Ä–∏–∑ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! (–ñ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ - —Å—é—Ä–ø—Ä–∏–∑ üòâ)"

        await owner_notify(
            context,
            f"üõí –ü–æ–∫—É–ø–∫–∞: {user.first_name or user.username or user.id} "
            f"–æ–±–º–µ–Ω—è–ª {p_cost}‚Ç¨ ‚Üí {item}. –ë–∞–ª–∞–Ω—Å: {new_bal}‚Ç¨."
        )

        await q.edit_message_text(
            f"‚úÖ –û–±–º–µ–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω: {item} –∑–∞ {p_cost}‚Ç¨{extra}\n"
            f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {new_bal}‚Ç¨"
        )
        await q.message.reply_text("–•–æ—á–µ—à—å –æ–±–º–µ–Ω—è—Ç—å —á—Ç–æ-—Ç–æ –µ—â—ë?", reply_markup=menu_keyboard(new_bal))
        return

    if action == "cancel":
        if len(data) != 2:
            return
        token = data[1]
        pending_del(token)
        await q.edit_message_text("–û–±–º–µ–Ω –æ—Ç–º–µ–Ω—ë–Ω. –í—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–π –ø—Ä–∏–∑ –∏–∑ –º–µ–Ω—é ‚ù§Ô∏è")
        return

# -------- Main --------
def main():
    init_db()
    app = Application.builder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("balance", balance_cmd))
    app.add_handler(CommandHandler("love_menu", menu_cmd))

    app.add_handler(CallbackQueryHandler(callbacks))
    app.add_handler(MessageHandler(filters.PHOTO, photo_router))

    print("Love Bank (OpenAI Vision) –∑–∞–ø—É—â–µ–Ω. Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞.")
    app.run_polling()

if __name__ == "__main__":
    main()
